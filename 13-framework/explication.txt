-------------------------------------------------
EXPLICATION MINI-RAMEWORK
------------------------------

Arborescence :
-----------------
    app/ : La configuration de notre application
    src/ : Le Code PHP et HTML spécifique à notre projet
    vendor/ : Code général (coeur) de l'application
    web/ : Repertoire web racine, point d'entrée de notre application (index.php, img/, photo/, js/, fonts/). Les assets (ressources).


Nature des différents fichiers :
---------------------------------

app/
    /Config
        parametres.php : Contient toutes les informations de connexion à la BDD .... et autres parametres


    config.php : Contient la class Config, dont l'objectif est de récupérer les parametres et de les servir...


Vendor/
    autoload.php : ce fichier permet d'inclure (require) les bons fichiers lors des instanciations. Lorsqu'on va créer  un objet l'autoload va se charger d'inclure la classe necessaire.

src/
    Entity/
        Produit.php/ Membre.php / Commande.php : ces slasses contiennent toutes les propriétés (private) de nos entités + les getters et les setters. Ce sont les plans de fabrication de nos entités. On les appelle des POPO (Plain Old PHP Object).

web/
    index.php : Clé d'entrée de notre application (app.php ou app_dev.php)

vendor/
    Manager/
        PDOManager : Cette classe représente la connexion à la BDD. Elle contient et nous retourne notre objet PDO, grâce auquel nous pourrons exécuter des requêtes SQL.
        Cette classe est un singleton. Cela signifie qu'il ne peut y avoir qu'un seul objet issu de cette classe

    Repository/
        EntityRepository.php : Ce fichier centralise tout ce qui touche à la base de données. Les repository servent à effectuer des requêtes SQL. Ce fichier est le parent de Repository, il gère la connexion à la BDD et les requêtes génériques.


src/
    Repository/
        ProduitRepository.php : Ce fichier contiendera toutes les fonctions lié à l'entité Produit, et "demandera" à EntityRepository de faire certaines enquêtes. On ne codera dans ce repository que les requêtes qui lui sont propres.


vendor/
    Controller/
        Controller.php : C'est le controller général de l'application. il a deux missions : 
            1/ Récupérer le repository correspondant à l'intité dans laquelle nous sommes (getRepository())
            2/ Afficher la vue correspondant à l'action en cours.


src/
    Controller/
        ProduitController.php : Cette class hérite du controller général, et permet de déclancher toutes les actions liéer à l'entité Produit.


web/
    Copier et coller de puis la boutique en procédural: photo/ (css/, js/, font/, img/ etc...)

src/
    View/
        Produit/
            Copier et coller depuis phpoo/12-mvc : boutique.php, fiche_produit.php
            Ces deux fichiers corespondent au vues des actions afficheAll(), affiche(), categorie(). 
            Nous travaillons maintenant en Objet donc $Produit['titre] devient $Produit - getTitre().
            Plus tard ces fichiers seront l'extension.html (grâce à la méthode render())

        layout.html : Ce fichier constitue la structure des pages du site. Le template. 
        En fonction des sites, il peut y avoir plusieurs layout (home, CGV(=Conditions générales de vente = Mentions légales), Backoffice...)


vendor/
    Manager/
        Application.php : Cette classe représente le lancement de notre application. Elle a pour mission, de scruter L'URL, et de lancer le bon controller, et la bonne méthode.
        C'est notre "interrupteur".

        